name: Run Tests with APK

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v3
        with:
          name: native-demo-app
          path: ./apps/android.wdio.native.app.v1.0.8.apk

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download APK artifact
        uses: actions/download-artifact@v3
        with:
          name: native-demo-app

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Set up Android SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk
          mkdir -p /usr/local/lib/android/sdk
          curl -o android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip android-sdk.zip -d /usr/local/lib/android/sdk/cmdline-tools
          mv /usr/local/lib/android/sdk/cmdline-tools/cmdline-tools /usr/local/lib/android/sdk/cmdline-tools/latest
          yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/usr/local/lib/android/sdk --licenses
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/usr/local/lib/android/sdk "platform-tools" "build-tools;35.0.0" "system-images;android-30;google_apis;x86_64" "emulator"
          
      - name: Add Android tools to PATH
        run: |
          echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/build-tools/35.0.0" >> $GITHUB_PATH

      - name: Set environment variables
        run: |
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          
      - name: Create and start emulator
        run: |
          echo "no" | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager create avd -n TestEmulator -k "system-images;android-30;google_apis;x86_64" --force
          nohup /usr/local/lib/android/sdk/emulator/emulator -avd TestEmulator -no-audio -no-window &
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager list avd

      - name: Wait for emulator to boot
        run: |
          adb devices
          adb wait-for-device
          echo "Device detected. Waiting for it to boot..."
          boot_completed=false
          max_attempts=60  # Tempo m√°ximo de espera: 5 minutos
          attempts=0
          while [ "$boot_completed" != "1" ] && [ $attempts -lt $max_attempts ]; do
            sleep 5
            boot_completed=$(adb shell getprop sys.boot_completed | tr -d '\r')
            echo "Attempt $((attempts + 1)): boot_completed=$boot_completed"
            adb shell getprop ro.build.version.release
            adb shell getprop ro.product.model
            adb devices
            attempts=$((attempts + 1))
          done
          if [ "$boot_completed" != "1" ]; then
            echo "Emulator failed to boot within the timeout period. Debug info:"
            adb shell getprop
            adb devices
            exit 1
          fi
          echo "Emulator booted successfully!"


      - name: Run tests
        run: npx wdio local-wdio.conf.js # Substitua com o comando para rodar seus testes
